l = []
import re
# iː
import sys

if sys.argv[1] == "word":
    """
    create prediciton set for testing if word's transciption are well graphemized. I use a dict because, We need only one same transcription, so one same pronunctiation
    """
    #     d_wd = {}
    d_wug = {}
    # open file generated by prewuggy.py words
    with open('../wuggydict/words.txtword', "r") as f:
        lines = f.readlines()
    for line in lines:
        wd, tr = line[:-1].split('\t')
        if d_wug.get(tr, None) is None:
            d_wug[tr] = True
        else:
            continue
    with open("../wuggydict/test.word", "w") as f:
        for key in d_wug.keys():
            f.write(f"_\t{key}\n")
#
if sys.argv[1] == "res-non-word":
    """
    format of last output
    """
    d_wd = {}
    d_nwd = {}
    false = 0
    # lsit word , trasncriptions : return dict word:tr
    with open('../wuggydict/words.txtword', "r") as f:
        lines = f.readlines()
    for line in lines:
        wd, tr = line[:-1].split("\t")
        d_wd[tr.strip(" ")] = wd
    # list of transcriptions of non words
    with open('../wuggydict/test.p2g', "r") as f:
        ps = f.readlines()
    # list of transcriptions graphemized of non words
    with open('../wuggydict/test.g2p', "r") as f:
        gs = f.readlines()
    assert len(ps) == len(gs)
    # return dict of trasncription:non-words
    for g, p in zip(gs, ps):
        p = p[:-1].split("\t")[1]
        d_nwd[p] = g[:-1]
    with open('../wuggydict/results.postscoring', 'r') as f:
        lines = f.readlines()[1:]
    l = []

    # write pairs words nonwords in graph-phon
    for line in lines:
        wd, nwd = line[:-1].split("\t")
        if d_wd.get(wd, None) is None:
            continue
        if d_nwd.get(nwd, None) is None:
            continue
        l.append((d_wd[wd], wd, d_nwd[nwd], nwd))
    with open('../wuggydict/results.gp', 'w') as f:
        f.write("word_g\tword_p\tnonword_g\tnonword_p\n")
        for i in l:
            f.write("{}\n".format('\t'.join(list(i))))

if sys.argv[1] == "res-word":
    """
    filter words bd graphemized
    """
    d_wd = {}
    d_tr = {}
    false = 0
    # list of words-tr, return dict tr:word
    with open('../wuggydict/words.txtword', "r") as f:
        lines = f.readlines()
    for line in lines:
        wd, tr = line[:-1].split("\t")
        d_wd[wd] = tr
        d_tr["".join(tr.strip(' ').split(" "))] = wd
    # result of p2g : list of word's graphems
    # del words in prec dict if not match
    with open("../wuggydict/results.word", 'r') as f:
        lines = f.readlines()
    for i, line in enumerate(lines):
        if i % 2 == 0:
            continue
        tr = "".join(line[:-1].split(" ")[:-1])
        wd = line[:-1].split(" ")[-1]
        #         print(wd, tr)
        if d_tr[tr] != wd:
            print(d_tr[tr], wd, tr, sep="\t")

            del d_tr[tr]
            false += 1
    print(false, "word bad graphemized")

    # read nonwords generated by wuggy
    with open("../wuggydict/non-words.txt", "r") as f:
        lines = f.readlines()[1:]

    # adn write
    with open("../wuggydict/non-words.fwords.txt", "w") as f:
        for line in lines:
            wd, nwd = line[:-1].split("\t")
            #             print(wd, nwd)
            if d_tr.get(wd.strip(" "), None) is None:
                continue
            f.write(line)

if sys.argv[1] == "test-p2g":
    """
    format for p2g and filter nonwords bad syllabified
    syll sep: '-'; phone sep ';'.
    """
    d_wug = {}
    with open('../wuggydict/wuggydict.tsv', 'r') as f:
        lines = f.readlines()
    for line in lines:
        wd, sylls, _ = line[:-1].split('\t')
        d_wug[wd] = len(sylls.split("-"))
    with open("../wuggydict/non-words.fwords.txt", "r") as f:
        lines = f.readlines()[1:]
    false = 0
    with open("../wuggydict/test.p2g", "w") as f:

        for line in lines:
            wd, nwd = line[:-1].split("\t")
            if len(nwd.split("-")) != d_wug[wd]:
                print(line[:-1], "syll")
                false += 1
                continue
            nwd = " ".join([i for i in re.split(r"[:\-]", nwd) if i != ""])
            f.write(f"_\t{nwd}\n")
        print(false, "non-word bad syllabified")

    with open("../wuggydict/results.p2g", "r") as f:
        prec = ""
        for i, line in enumerate(f):
            if i % 2 == 0:
                continue
            print(line[:-1].split(" ")[-1])

if sys.argv[1] == "scoring":
    """ prepare nonwords for scoring"""
    # needs to use phone from phoneset ipa for separate phones in words and nonwords : begin by phoen with two letter, if not phoen with one letter
    with open("../folding/phone-folding.txt", "r") as f:
        for line in f:
            line = line[:-1].split(",")[-1]
            #             if len(line.split(":")) > 1:
            #                 continue
            l.append(line)
    with open("../wuggydict/results.fg2p2g", "r") as f:
        txt = f.readlines()[1:]
        ll = []
        print("Word\tMatch")
        for lines in txt:
            line = lines[:-1].split("\t")[0]
            i = 0
            w = []
            while i < len(line) - 1:
                p = line[i:i + 2]
                if p in l:
                    w.append(p)
                    i += 2
                else:
                    w.append(p[0])
                    i += 1

            if len(line) != len("".join(w)):
                w += [line[-1]]

            line = lines[:-1].split("\t")[1]
            i = 0
            wn = []
            while i < len(line) - 1:
                p = line[i:i + 2]
                if p in l:
                    wn.append(p)
                    i += 2
                else:
                    wn.append(p[0])
                    i += 1

            if len(line) != len("".join(wn)):
                wn += [line[-1]]
            print(" ".join(w), " ".join(wn), sep="\t")
